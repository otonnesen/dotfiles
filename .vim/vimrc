if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/goyo.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'majutsushi/tagbar'
Plug 'jrozner/vim-antlr'
Plug 'lervag/vimtex'
Plug 'fatih/vim-go'
Plug 'rust-lang/rust.vim'
call plug#end()

let mapleader=" "

" Preliminaries
	set nocompatible
	syntax on
	set encoding=utf-8
	set number
	set relativenumber
	filetype plugin indent on
" Themes
	let g:airline_theme='base16_gruvbox_dark_hard'
" vim-go
	let g:go_fmt_command = "goimports"
" Indents
	set autoindent
	set smartindent
	set tabstop=8
	set softtabstop=4
	set shiftwidth=4
	set noexpandtab
" Command-mode autocompletion
	set wildmode=longest,list,full
" Give backspace default functionality
	set backspace=
" Goyo for prose
	map <leader>f :Goyo \| set linebreak<CR>
" Spellcheck
	map <leader>o :setlocal spell! spelllang=en_ca<CR>
" Tagbar
	map <leader>t :Tagbar<CR>
" Replace all with S
	nnoremap S :%s//g<Left><Left>
" Make Y behave like D
	map Y y$
" Compile document
	map <leader>c :w! \| !compiler <c-r>%<CR><CR>
" Clean tex build files
	autocmd VimLeave *.tex !texclear %
" Apply Xresources changes
	autocmd VimLeave ~/.Xresources !xrdb %
" Recursively look for tags file in `./[../]*.git/tags` or `./[../]*tags`.
" Generate tags files from in .git directory with `ctags -R ..` or from  in
" the base project directory with `ctags -R .`.
	set tags=TAGS;/,.git/TAGS;/,tags;/,.git/tags;/
" Open tag in new vsplit buffer
	function Check_tag()
		" The second condition ensures that "class" doesn't think it matches with
		" "className", for example.
		if !empty(taglist(expand("<cword>"))) && taglist(expand("<cword>"))[0].name ==# expand("<cword>")
			exec "norm!\<C-w>v\<C-w>l\<C-]>"
		else
			echo "Tag not found"
		endif
	endfunction
map <leader>] :call Check_tag()<CR>
" Shorter movement commands
	map <C-h> <C-w>h
	map <C-j> <C-w>j
	map <C-k> <C-w>k
	map <C-l> <C-w>l
" Tab movement commands
	map <C-n> :tabn<CR>
	map <C-p> :tabp<CR>
" Move viminfo file
	set viminfo+=n$HOME/.cache/viminfo
" Manually set filetype for *.g files
	au BufRead,BufNewFile *.g set filetype=antlr3
" Thin cursor when in insert mode
	let &t_SI = "\<Esc>[6 q"
	let &t_SR = "\<Esc>[4 q"
	let &t_EI = "\<Esc>[2 q"
" Fix vim cursor in tmux
	if exists('$TMUX')
		let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>[6 q\<Esc>\\"
		let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>[4 q\<Esc>\\"
		let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>[2 q\<Esc>\\"
	endif
" Fix graphical lag when entering normal mode (note: does not work in tmux)
" (note note: I think it does now?)
	set ttimeout
	set ttimeoutlen=1
	set listchars=tab:>-,trail:~,extends:>,precedes:<,space:.
	set ttyfast
